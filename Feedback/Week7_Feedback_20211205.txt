Starting code feedback for Zhengxin, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 35.23 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week5, week4, week1, week2, week7, .git, MiniProject, week8, week3, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.aux
*.bbl
*.blg
*.log
*.pdf
*.png
__pycache__/
*.py[cod]
#This is automatically made when a program is imported in python 
.RData
.Rhistory
results/
!results/.gitkeep
.ipynb_checkpoints/
plots/
!plots/.gitkeep
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
### Jasmine Yang's CMEECoursework Repository  
- Detailed explanation of folder contents can be found in each folder.

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: week1, week2, week3, week4, week5, week7, week8

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, data, sandbox, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# DrawFW.py  
Creates and plot a simple food web network with node sized corresponding to each species's biomass.  
Language: python3  

### Usage
```python
# Required packages: networkx, sumpy, matplotlib.pylab
%run DrawFW.py
```

&nbsp;

# LV1.py
Integrating the Lotka-Volterra model to calcuate the population density at different time points and produce two pdf plots from example data.  
Language: python3

### Usage
```python
# Required packages: numpy, matplotlib.pylab, scipy.integrate 
%run LV1.py

# Functions:
import LV1
dCR_dt(pops, t=0) # Function that contains the Lotka-Volterra model
``` 

&nbsp;

# oaks_debugme.py
Runs through species name in a csv file and saves the oak species (Quercus) in a new csv (JustOaksData.csv).   
Language: python3

### Usage
```python
# Required packages: csv, sys
%run oaks_debugme.py

# Functions:
import oaks_debugme.py
is_an_oak(name) # Returns True if name is starts with 'Quercus'
```

&nbsp;

# profileme.py
Example functions to be tested for code running time.  
Language: python3 

### Usage
```python
import profileme

# Function that produce a list of squared number series
my_squares(iters)

# Function that joins "string" iters times, seperated by ","
my_join(iters, string)

# Runs function my_squares and my_join 
run_my_funcs(x,y)
```

&nbsp;

# profileme2.py
Improved example functions to be tested for code running time.  
Language: python3

### Usage 
```python
#Required packages: numpy
import profileme2

# Function that produce a list of squared number series 
my_squares(iters)

# Function that joins "string" iters times, seperated by ","
my_join(iters, string)

# Runs function my_squares and my_join
run_my_funcs(x,y)
```

&nbsp;

# regexs.py
Examples of using regex for seaching in Python.  
Language: python3

### Usage
```python
# Required packages: re, urllib3
%run regex.py
```

&nbsp;

# TestR.py
Running R from python using subprocess.  
Language: python3 & R

### Usage
```python
# Required packages: subprocess
%run TestR.py
```

&nbsp;

# TestR.R
Print "Hello, this is R!".  
Language: R

### Usage
```R
source("TestR.R")
```

&nbsp;

# timeitme.py
Testing timeit for profiling.  
Language: python3

### Usage
```python
# Required packages: timeit, profileme.py, profileme2.py
%run timeitme.py

# Profiling functions from profileme.py and profileme2.py
%timeit my_squares_loops(iters)
%timeit my_squares_lc(iters)
%timeit (my_join_join(iters, mystring))
%timeit (my_join(iters, mystring))
```
**********************************************************************

Results directory is empty - good! 

Found 10 code files: TestR.py, profileme.py, regexs.py, oaks_debugme.py, MyFirstJupyterNb.ipynb, profileme2.py, TestR.R, LV1.py, DrawFW.py, timeitme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
## R can be run from python using subprocess
""" Running R from python using subprocess """ 

import subprocess

subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()
# --verbose will show what R is actually doing
# ">" is used to assign the output to assign the output to files
# "2>" assigns the second output, which is content of --verbose in this case

subprocess.Popen("Rscript --verbose NonExistScript.R > ../results/outputFile.Rout 2> ../results/errorFile.Rout", shell=True).wait()
# Since the R script don't exist, the stored output it the error message 
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08981s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
## Profiling ##
# Run the script in ipython with "run -p "
# Or "python3 -m cProfile xxx.py" from bash
# Allows identificaton of functions that are slowing the code down

""" Example functions to be tested for code running time """ 

def my_squares(iters):
    """ function that produce a list of squared number series """
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """ function that joins "string" iters times, seperated by "," """
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """ Runs function my_squares and my_join """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0 

run_my_funcs(10000000, "My string")


**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.21267s

======================================================================
Inspecting script file regexs.py...

File contents are:

**********************************************************************
#### Regex in Python ####
""" Examples of using regex for seaching in Python """
import re 

my_string= "a given string"
match = re.search(r'\s', my_string) # searches for any whitespace character in my_string
print(match) # This only shows whether an match is made or not]
match # Same as above
match.group() # Actually sees the match

match = re.search(r'\d', my_string) # searches for any numeric integer
print(match)

MyStr = "an example"
# searches for whitespace alphanumeric characters preceeded or not preceeded by alphanumeric  
match = re.search(r'\w*\s', MyStr) 
# Checking if a match was made or not using 'if'
if match:
    print("Found a match:", match.group())
else:
    print("No match ):")

match = re.search(r'2', "it takes 2 to tango")
match.group()

match = re.search(r'\d', "it takes 2 to tango")
match.group()

# Searches for numeric and anything that follows it for any length
match = re.search(r'\d.*', "it takes 2 to tango")
match.group()

# Searches for any alphanumeric character of length 1 or 3 surrounded by whitespace
match = re.search(r'\s\w{1,3}\s', "once upon a time")
match.group()

# Searches for alphanueric character of any length at the end of a string preceded by a whitespace
match = re.search(r'\s\w*$', "once upon a time")
match.group()

# .group() can be put straight after the .search
# Searches for any length of anything before whitespace followed by a numeric
# followed by any length of anything before another numeric 
re.search(r'\w*\s\d.*\d', "takes 2 grams of H2O").group()

# Searches for anything of any length following alphanumeric before a space
re.search(r'^\w*.*\s', "once upon a time").group()
# Anything preceded by *, + and {} is repeated as many times as possible 
# until hitting the next meta/regularcharacter
# In this case, all three words before "time" not followed by space are searched 

# Only searches until the first result:
# ? should be placed right after *, +, () to stop their action 
re.search(r'^\w*.*?\s', "once upon a time").group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()
re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

# \ before . finds the literal "."
re.search(r'\d*\.?\d*', "1432.75+60.22i").group()

# Find any A, G, T, C
re.search(r'[AGTC]+', "the sequence ATTCGT").group()

# Find any alphanumeric preceded by a space and capital letter and any alphanumeric followed by that with a space 
re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

# Finding profile of people (name, email, description)
MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group() 


# Different format of email
MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group() # When there is no match, group() will give error
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()


## Grouping regex patterns ##
MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()
match.group(0) # without grouping, all the outputs are in a single line

# With grouping by ():
match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)",MyStr)
if match:
    print(match.group(0)) # All output
    print(match.group(1)) # First group 
    print(match.group(2)) # Second group
    print(match.group(3)) # Third group 


## Different Regex commands ##
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"

# findall() will return a list of all matches
emails = re.findall(r'[\w\.-]+@[\w\.-]+', MyStr)
for email in emails:
    print(email)
# Whereas, search() will only give the first match 
re.search(r'[\w\.-]+@[\w\.-]+', MyStr).group()

# findall() can also search through all the lines in a file
f = open("../data/TestOaksData.csv","r")
found_oaks = re.findall(r"Q[\w\s].*\s", f.read()) 
# .read() returns the whole text in a file as a single string
found_oaks

# findall() can also be combined with () grouping 
MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a.academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a.academic@imperial.ac.uk, Some other stuff thats even more boring"
found_matches = re.findall(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+)", MyStr)
found_matches # Returns a list of tuple instead of list of strings
for item in found_matches:
    print(item)

## Extracting text from webpages ##

import urllib3 # for extracting website text 

conn = urllib3.PoolManager() # opens a connection to start extracting data from somewhere 
# request() sends a request to the website and "GET" specify the data to be in the form of HTTPResponse object 
r = conn.request("GET", "https://www.imperial.ac.uk/silwood-park/academic-staff/")
webpage_html = r.data # read the data in the HTTPResponce 
type(webpage_html) # This data is in the form of byte not strings so needs decoding
My_Data = webpage_html.decode()
print(My_Data)

pattern = r"(Dr|Professor)\s+(\w{3,}\s+\w+)" # "|" means "or" and {3,} specifies the length to be at least 3 
# compile() compiles a regular expression for repeated use  
regex = re.compile(pattern) 
# finditer() is basically the same as findall() but returns a iterator with the match object so it can be iterated e.g. looped
result = []
for match in regex.findall(My_Data): 
    if match not in result:
        result.append(match)

result


## Replacing text ##
New_Data = re.sub(r'\t'," ", My_Data) # replace all tabs with a space
print(New_Data)

**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
Found a match: an 

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "regexs.py", line 77, in <module>
    match.group() # When there is no match, group() will give error
AttributeError: 'NoneType' object has no attribute 'group'

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
""" Runs through species name in a csv file and saves the oak species (Quercus) in a new csv (JustOaksData.csv) """

import csv
import sys

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'Quercus' 
    
    >>> is_an_oak("Quercus")
    True
    
    >>> is_an_oak("Genus")
    False

    >>> is_an_oak("Fraxinus")
    False

    >>> is_an_oak("Pinus")
    False

    >>> is_an_oak("Quercuss")
    False
    """
    return name == 'Quercus'

def main(argv): 
    """ Produce a csv file containing the name of oak species found in the input csv file """
    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w')
    taxa = csv.reader(f)
    next(taxa, None) # Skips a row i.e. ignores header
    csvwrite = csv.writer(g)
    oaks = set()
    #import ipdb; ipdb.set_trace()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.02523s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e63dfdff",
   "metadata": {},
   "source": [
    "The logistic growth equation:   \n",
    "$$\\frac{dN}{dt} = rN \\left(1-\\frac{N}{K}\\right)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f5c36ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96c7943f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import numpy as np\n",
    "\n",
    "x = np.arange(0,5,0.1); y=np.sin(x)\n",
    "p.plot(x,y); p.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
""" Improved example functions to be tested for code running time """ 

## Improved speed ##
import numpy as np

# Comprehensions saves time compared to for loops
# Preallocating numpy arrays saves more time than allocating list
def my_squares(iters):
    """ function that produce a list of squared number series """
    out = np.array(i ** 2 for i in range(iters))
    return out

# join() is slower than "+" to concatinate variables 
def my_join(iters, string):
    """ function that joins "string" iters times, seperated by "," """
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """ Runs function my_squares and my_join """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0 

run_my_funcs(10000000, "My string")

# Arguments for profiling
# -s sorts the result by specified section e.g. "run -p -s cuttime xxx.py"
# -l filters the results by function name and reduce the number of lines displayed
# -T saves the report in a text file
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 1.06970s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
print("Hello, this is R!")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.05341s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
""" Integrating the Lotka-Volterra model to calcuate the population density at different time points """

import numpy as np
import matplotlib.pylab as p
import scipy.integrate as integrate

## Lotka-Volterra model ##

# dR/dt = rR - aCR
# dC/dt = eaCR - zC

# R and C are the predator and prey popualtion abundances (number/area)
# r is the intrinsic growth rate of prey
# a is the per-capita "search rate" for the prey multiplied by its attack success probability
# i.e. the encounter and consumption rate of the consumer on the resource
# z is mortality rate of predator
# e is the predator's efficienty (fraction) in converting prey to biomass

# Need to integrate the equations by t to be able to add time as a variable 
# Defining a function that returns the growth rate of predaor and prey at any given time

def dCR_dt(pops, t=0):
    """ function that contains the Lotka-Volterra model """ 
    R = pops[0]
    C = pops[1]
    dRdt = r*R - a*R*C
    dCdt = e*a*R*C - z*C 

    return np.array([dRdt, dCdt])

type(dCR_dt)

# Defining parameters
r = 1.
a = 0.1
z = 1.5
e = 0.75

# Defining the time vector, integrating from time point 0 to 15, using 1000 sub-divisions of time
# linspace() returns evenly spaced numbers over a specified interval 
t = np.linspace(0, 15, 1000) # takes 1000 numbers between 0 and 15 at even interval

# Defining the initial populations 
R0 = 10
C0 = 5
RC0 = np.array([R0, C0])

# Integrating the equations in dCR_dt
# odeint() integrate a system of ordinary differential equations
# first parameter: a function that contains the equations
# 2nd parameter: an array that contains the initial condition of y
# 3rd parameter: sequence of time points for which to solve for y
# full_output=T produce a dictionary contianing additional info
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output = True)
pops
type(infodict)
infodict.keys()

# Plotting the results 1
f1 = p.figure() # assigning a object for the figure

# plot a line with t on x-axis, first column of pops on y-axis
p.plot(t,pops[:,0], 'g-', label="Resource density") # 'g-' gives green line
p.plot(t, pops[:,1], "b-", label="Consumer density")
p.grid() # adds grid
p.legend(loc="best") # add legend
p.xlabel("Time")
p.ylabel("Popualtion density")
p.title("Consumer-Resource popualtion dynamics")
#p.show()

# Saving the figure as pdf
f1.savefig("../results/LV_model.pdf")


# Plotting the result 2
f2 = p.figure()
p.plot(pops[:,0], pops[:,1], "r-")
p.grid()
p.xlabel("Resource density")
p.ylabel("Consumer density")
p.title("Consumer-Resource population dynamics")
#p.show()
f2.savefig("../results/LV_model2.pdf")
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.78907s

======================================================================
Inspecting script file DrawFW.py...

File contents are:

**********************************************************************
"""Creating a simple food web network"""

import networkx as nx # used for building network
import numpy as np
import matplotlib.pylab as p

def GenRdmAdjList(N=2, C=0.5):
    """ 
    Generating a symthetic food web consisting of a random adjacency list (a matrix with consumer in 1st column and 
    resource in the 2nd column and a seperate matrix of each species' properties e.g. biomass) of a N-species food web
    with connectance probability of C (the probability of having a link between any pair of species in the food web)
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if np.random.uniform(0,1,1) < C: # A random no. bewteen 0 and 1
            Lnk = np.random.choice(Ids,2).tolist() 
            # generate a random sample from an given array (2 from Ids here) and assign it as a list
            if Lnk[0] != Lnk[1]: # avoiding assigning the same species for both position
                ALst.append(Lnk)
    return ALst


MaxN = 30
C = 0.75

# Generating adjacency list: 
# Pairs of consumer id and resource id that have interaction 
AdjL = np.array(GenRdmAdjList(MaxN,C))
AdjL

# Generating species data (nodes)
Sps = np.unique(AdjL) # Obtaining a list of species from the adjacency list
Sps

# Body size for the species
SizRan = ([-10,10]) # In log10 scale
Sizs = np.random.uniform(SizRan[0], SizRan[1], MaxN)
Sizs

p.hist(Sizs)
#p.show()

p.hist(10 ** Sizs) # In raw scale
#p.show()

p.close("all") # Closing all the open plot objects

# Plotting the network #
# Making a circular configuration for each species 
pos = nx.circular_layout(Sps)
pos

G = nx.Graph() # Making a networkx graph object
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL)) # Only takes a tuple object

# Generate node sizes proportional to the log body size
NodSizes = 400 * (Sizs - min(Sizs)/(max(Sizs) - min(Sizs)))
NodSizes 

# Plotting the nexwork 
fig = p.figure(figsize=(15,10))
nx.draw_networkx(G, pos = pos, node_size = NodSizes)
p.show()
fig.savefig("../results/FoodWed.pdf")
**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
can't invoke "event" command: application has been destroyed
    while executing
"event generate $w <<ThemeChanged>>"
    (procedure "ttk::ThemeChanged" line 6)
    invoked from within
"ttk::ThemeChanged"

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
## timeit ##
# Loops at the time of specific function within the program instead of whole program
# Run "%timeit function(x)" (need to import timeit) in the terminal

""" Testing timeit for profiling """ 

#################################################
# loops vs list comprehensions: which is faster?
#################################################

iters = 10000000

import timeit

from profileme import my_squares as my_squares_loop
from profileme2 import my_squares as my_square_lc


#####################################################
# loops vs join method for strings: which is faster?
#####################################################
mystring = "my string"

from profileme import my_join as my_join_join
from profileme2 import my_join as my_join



**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.23986s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!