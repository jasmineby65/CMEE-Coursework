getwd()
q()
getwd()
q()
getwd()
MyData <- read.csv("../data/trees.csv")
ls()
class(MyData)
head(MyData)
str(MyData)
MyData <- read.csv("../data/trees.csv", header = F)
head(MyData)
MyData <- read.table("../data/trees.csv", sep = ",", header=T)
head(MyData)
MyData <- read.csv("../data/trees.csv",skip = 5)
head(MyData)
MyData <- read.csv("../data/trees.csv",skip = 5)
head(MyData)
write.csv(MyData, "../results/MyData.csv")
dir("../results/")
MyData <- read.csv("../data/trees.csv", header=T)
head(MyData)
write.csv(MyData, "../results/MyData.csv")
dir("../results/")
write.table(MyData[1,], file = "../results/MyData.csv",append=T)
write.table(MyData, file = "../results/MyData.csv",row.names=T)
head(MyData)
head(MyData.csv)
head("../results/MyData.csv")
?write.tabe
?write.table
Data <- read.csv("../results/MyData.csv",header=T)
head(Data)
head(MyData)
write.table(MyData, "../results/MyData.csv", col.name=F)
Data <- read.csv("../results/MyData.csv")
head(Data(
head(Data)
head(MyData)
q()
MyData <- read.csv("../data/trees.csv", header = T)
# import with headers
write.csv(MyData, "../results/MyData.csv")
write.table(MyData[1,], file="../results/MyData.csv", append=T)
# A simple script to illustrate R input-output
MyData <- read.csv("../data/trees.csv", header = T)
# import with headers
write.csv(MyData, "../results/MyData.csv")
# write it out as a new file
write.table(MyData[1,], file="../results/MyData.csv", append=T)
# append the first row of MyData (header) to the new file
write.csv(MyData, "../results/MyData.csv", row.names=T)
# Overwrite the new file including number of rows as a column
write.table(MyData, "../results/MyData.csv", col.names=F)
# Overwrite the new file without column names i.e. header
source("basic_io.R")
q()
a <- T
if (a == TRUE){
print("a is TRUE")
} else {
print("a is FALSE")
}
?runif
z <- runif(1)
# generating a uniformly distributed random number
if (z <= 0.5) {print("Less than a half")}
for (i in 1:10){
j <- i*i
print(paste(i, "squared is", j))
}
for(species in c("Heliodoxa rubinoides",
"Boissonnoneaua jardini", "Sula nebouxii")){
print(paste("The species is", species))
}
v1 <- c("a", "bc", "def")
for (i in v1){
print(i)
}
i <- 0
while (i <10){
i <- i+1
print(i^2)
}
q()
is.power2 <- function(n=2) {
if(log2(n) %% 1 == 0){
return(paste(n,"is a power of 2!"))
}
return(paste(n,"is not a power of 2!"))
}
is.power2(4)
is.power2()
q()
?sample
myexperiment <- function(popn, n){
pop_sample <- sample(popn, n, replace = F)
# replace in sampling means the sampled object is returned to the population
# so each time a sample is taken, it is from the whole population
# replace = F means that the sampled object is removed from the population
# so the probability of being sampled will increase proportionally with the size of remaining popu.
return(mean(pop_sample))
}
?lappy
?lapply
source("sample.R")
x <- 1:20
x
y <- factor(rep(letters[1:5], each = 4))
y
tapply(x, y, sum)
attach(iris)
iris
by(iris[,1:2], iris$Species, colMeans)
by(iris[,1:2], iris$Petal.Width, colMeans)
replicate(10,runif(5))
?replicaet
?replicate
?runif
q()
q()
source("Ricker.R")
q()
?testthat
.vsc.attach()
install.packages("testthat")
q()
source("browse.R")
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
nq()
q()
?unique
?stop
source("try.R")
source("try.R")
q()
q()
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", head = F, stringsAsFactors=F)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv"), head = F, stringsAsFactors=F)
class(MyData)
head(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv"), header = F, stringsAsFactors=F)
head(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv"), header = False, stringsAsFactors=False)
class(MyData)
head(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = False, stringsAsFactors=False))
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = F, stringsAsFactors=F))
head(MyData)
class(MyData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header=T)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header=T, sep=";")
class(MyMetaData)
head(MyMetaData)
q()
head(MyData)
view(MyData)
fix(MyData)
dim(MyData)
str(MyData)
fix(MyMetaData)
fix(MyData)
MyData <- t(MyData)
head(MyData)
dim(MyData)
fix(MyData)
fix(MyData)
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
class(TempData)
fix(MyData)
TempData <- as.data.frame(MyData[-2,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
TempData <- as.data.frame(MyData[-3,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
TempData <- as.data.frame(MyData[2,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
TempData <- as.data.frame(MyData[2:,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
head(TempData)
colnames(TempData) <- MyData[1,]
head(TempData)
############# Convert from wide to long format  ###############
?melt
??melt
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
require(reshape2)
install.packages(reshape2)
install.packages("reshape2")
############# Convert from wide to long format  ###############
require(reshape2)
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
